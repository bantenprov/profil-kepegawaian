<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User;
use App\Pegawai;
use Validator;

class PegawaiController extends Controller
{

    protected $userModel;
    protected $pegawaiModel;

    public function __construct()
    {
        $this->userModel = new User;
        $this->pegawaiModel = new Pegawai;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if($request->get('search') != ''){
            $pegawais = $this->pegawaiModel->where('full_name','like','%'.$request->get('search').'%')->orWhere('nip','like','%'.$request->get('search').'%')->paginate(10);
            return view('pegawai.index',compact('pegawais'));
        }else{
            $pegawais = $this->pegawaiModel->paginate(10);
            return view('pegawai.index',compact('pegawais'));
        }
        
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $users = $this->userModel->all();
        return view('pegawai.create',compact('users'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(),[
            'user_id'       => 'required|unique:pegawais,user_id',
            'nip'           => 'required',
            'dinas'         => 'required',
            'full_name'     => 'required',
            'jabatan'       => 'required',
            'join_date'     => 'date|required',
            'tgl_pensiun'   => 'date|required'            
        ]);

        if($validator->fails()){
            return redirect()->back()->withErrors($validator)->withInput();
        }

        try {
            $this->pegawaiModel->create($request->all());
            return redirect()->route('kepegawaian.index')->with('message','Add new data success');
        } catch (\Exception $e) {
            return redirect()->route('kepegawaian.index')->withErrors('Critical Error');
        }
        
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {        
        try {
            $pegawai = $this->pegawaiModel->findOrFail($id);        
            return view('pegawai.show',compact('pegawai'));
        } catch (\Exception $e) {
            return redirect()->route('kepegawaian.index')->withErrors('Critical Error');
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {        

        try {
            $pegawai = $this->pegawaiModel->findOrFail($id);
            $users = $this->userModel->all();
            return view('pegawai.edit',compact('pegawai','users'));
        } catch (\Exception $e) {
            return redirect()->route('kepegawaian.index')->withErrors('Critical Error');
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = Validator::make($request->all(),[
            'user_id'       => 'required',
            'nip'           => 'required',
            'dinas'         => 'required',
            'full_name'     => 'required',
            'jabatan'       => 'required',
            'join_date'     => 'date|required',
            'tgl_pensiun'   => 'date|required'            
        ]);

        if($validator->fails()){
            return redirect()->back()->withErrors($validator)->withInput();
        }

        try {
            $this->pegawaiModel->findOrFail($id)->update($request->all());
            return redirect()->route('kepegawaian.index')->with('message','Update data success');
        } catch (\Exception $e) {
            return redirect()->route('kepegawaian.index')->withErrors('Critical Error');
        }
        
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        
        try {
            $this->pegawaiModel->findOrFail($id)->delete();
            return redirect()->back()->with('message','Delete data success');
        } catch (\Exception $e) {
            return redirect()->route('kepegawaian.index')->withErrors('Critical Error');
        }
        
    }
}
